name: build cypher node release

on:
  push:
    tags:
      - 'v*.*.*'


jobs:
  build-linux:
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get version
        uses: ./.github/actions/get-version

      - name: Verify AssemblyVersion cypcore
        run: ./.github/actions/get-version/validate.sh ./cypcore/cypcore.csproj ${{ env.VERSION }}
        shell: bash

      - name: Verify AssemblyVersion cypnode
        run: ./.github/actions/get-version/validate.sh ./cypnode/cypnode.csproj ${{ env.VERSION }}
        shell: bash

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Create linux-x64 package
        uses: ./.github/actions/build-linux
        with:
          runtime: 'linux-x64'

      - name: Create linux-arm package
        uses: ./.github/actions/build-linux
        with:
          runtime: 'linux-arm'

      - name: Create linux-arm64 package
        uses: ./.github/actions/build-linux
        with:
          runtime: 'linux-arm64'

      - name: Create releases
        id: gh-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: cypher-cypnode_${{ env.VERSION }}*.*
          name: Release v${{ env.VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: cypnode/Dockerfile.build
          push: true
          build-args: |
            version=v${{ env.VERSION }}
          tags: |
            tangrams/cypher:latest
      - name: Docker Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        uses: ./.github/actions/get-version

      - name: Create Windows release
        id: gh-release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: cypher-cypnode_$VERSION*.msi
