@page "/serf"
@using Microsoft.AspNetCore.SignalR.Client
@using rxcypcore.Serf
@using rxcypnode.Hubs
@using MessagePack
@using Microsoft.Extensions.DependencyInjection
@using System.Net

<MatAccordion>
    <MatExpansionPanel @bind-Expanded="@PanelOpenState">
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>
                Serf status: @ClientState
            </MatExpansionPanelHeader>
            <MatExpansionPanelSubHeader>
                <MatIcon Icon="settings_input_antenna" Class="@ConnectionIconClass"></MatIcon>
            </MatExpansionPanelSubHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <MatButton Icon="exit_to_app" OnClick="@DoLeave" Label="Leave" Disabled="(ClientState != ISerfClient.ClientState.Connected)"></MatButton>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
</MatAccordion>
<MatDivider></MatDivider>

@if (ClientState == ISerfClient.ClientState.Connected)
{
    <MatTable Items="@Members" Class="mat-elevation-z5">
        <MatTableHeader>
            <th scope="col" />
            <th scope="col" style="width:40%">
                Name
            </th>
            <th scope="col" class="text-right" style="width:20%">
                Address
            </th>
            <th scope="col" class="text-right" style="width:20%">
                Node port
            </th>
            <th scope="col" class="text-right" style="width:20%">
                API port
            </th>
        </MatTableHeader>
        <MatTableRow>
            <td><MatIcon Icon="settings_input_antenna" Class="@ClientConnectionClass(@context.Status)"></MatIcon></td>
            <td>@context.Name</td>
            <td style="text-align:right">@context.IpAddress</td>
            <td style="text-align:right">@context.Port</td>
            <td style="text-align:right">@context.ApiPort</td>
        </MatTableRow>
    </MatTable>
}
@code {
    private HubConnection _connection;

    [Parameter]
    public ISerfClient.ClientState ClientState { get; set; } = ISerfClient.ClientState.Initializing;

    public string ConnectionIconClass => $"client-{ClientState.ToString().ToLower()}";

    public string ClientConnectionClass(string clientConnectionStatus)
    {
        Console.WriteLine("Getting client status: " + clientConnectionStatus);
        return $"serf-{clientConnectionStatus}";
    }

    public bool PanelOpenState;

    public class FlatMemberEndpoint
    {
        public string Name;
        public ushort IPv;
        public IPAddress IpAddress;
        public ushort Port;
        public ushort? ApiPort;
        public string Status;

        public override bool Equals(object? obj)
        {
            return obj is FlatMemberEndpoint other && other.Name.Equals(Name) && other.IPv.Equals(IPv) && other.IpAddress.Equals(IpAddress) && other.Port.Equals(Port) && other.ApiPort.Equals(ApiPort);
        }
    };

    public List<FlatMemberEndpoint> Members { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:7000/hubs/serf")
            .AddMessagePackProtocol(options =>
            {
                options.SerializerOptions = MessagePackSerializerOptions
                    .Standard
                    .WithResolver(rxcypcore.Helper.MessagePack.Resolver.Get())
                    .WithSecurity(MessagePackSecurity.UntrustedData);
            })
            .Build();
        
        _connection.On<ISerfClient.ClientState>("ClientState", ReceiveClientState);
        _connection.On<MemberEvent>("MemberEvent", ReceiveMemberEvent);
        _connection.On<MemberList>("Members", ReceiveMembers);
        await _connection.StartAsync();
    }

    Task ReceiveClientState(ISerfClient.ClientState clientState)
    {
        ClientState = clientState;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveMemberEvent(MemberEvent memberEvent)
    {
        Console.WriteLine("Member " + memberEvent.Type + " for " + memberEvent.Member.Name);
        
        var member = getFlatMemberEndpoint(memberEvent.Member.Name, new MemberEndpoint(memberEvent.Member));
        
        if (memberEvent.Type == MemberEvent.EventType.Join)
        {
            var existingMember = Members.FirstOrDefault(m => m.Equals(member));
            if (existingMember == null)
            {
                Console.WriteLine("Number of members in list: " + Members.Count + ", adding member");
                Members.Add(member);
            }
            else
            {
                existingMember.Status = member.Status;
            }
        }
        else if (memberEvent.Type == MemberEvent.EventType.Leave)
        {
            Members.Remove(member);
        }
        else if (memberEvent.Type == MemberEvent.EventType.Failed)
        {

            var existingMember = Members.FirstOrDefault(m => m.Equals(member));
            if (existingMember != null)
            {
                existingMember.Status = member.Status;
            }
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveMembers(MemberList members)
    {
        Members.Clear();
        
        foreach (var member in members.Data)
        {
            foreach (var endpoint in member.Value)
            {
                Members.Add(getFlatMemberEndpoint(member.Key, endpoint));
            }
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    private FlatMemberEndpoint getFlatMemberEndpoint(string name, MemberEndpoint member)
    {
        var newMember = new FlatMemberEndpoint
        {
            Name = name,
            IPv = member.IPv,
            IpAddress = member.Address,
            Port = member.Port,
            ApiPort = member.APIPort,
            Status = member.Status
        };
        
        return newMember;
    }

    private async void DoLeave()
    {
        await _connection.InvokeAsync("Serf", SerfHub.SerfMethod.Leave);
    }
}