@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using rxcypcore.Serf
@using rxcypnode.Hubs
@using MessagePack
@using Microsoft.Extensions.DependencyInjection

<h3>Serf @ClientState @Members.Data.Keys.Count</h3>

@if (ClientState == ISerfClient.ClientState.Disconnected)
{
    <button @onclick="DoJoin">Join</button>
}
else if (ClientState == ISerfClient.ClientState.Connected) 
{
    <button @onclick="DoLeave">Leave</button>
}

<table>
    @foreach (var (key, value) in Members.Data)
    {
        @foreach (var endpoint in value)
        {
            <tr>
                <td>
                    @key
                </td>
                <td>
                    @endpoint.Address
                </td>
                <td>
                    @endpoint.Port.ToString()
                </td>
            </tr>
        }
    }
</table>

@code {
    private HubConnection _connection;

    [Parameter]
    public ISerfClient.ClientState ClientState { get; set; } = ISerfClient.ClientState.Initializing;

    [Parameter]
    public MemberList Members { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:7000/hubs/serf")
            .AddMessagePackProtocol(options =>
            {
                options.SerializerOptions = MessagePackSerializerOptions
                    .Standard
                    .WithResolver(rxcypcore.Helper.MessagePack.Resolver.Get())
                    .WithSecurity(MessagePackSecurity.UntrustedData);
            })
            .Build();
        
        _connection.On<ISerfClient.ClientState>("ClientState", ReceiveClientState);
        _connection.On<MemberEvent>("MemberEvent", ReceiveMemberEvent);
        _connection.On<MemberList>("Members", ReceiveMembers);
        await _connection.StartAsync();
    }

    Task ReceiveClientState(ISerfClient.ClientState clientState)
    {
        ClientState = clientState;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveMemberEvent(MemberEvent memberEvent)
    {
        Console.WriteLine("Member " + memberEvent.Type + " for " + memberEvent.Member.Name);
        
        if (memberEvent.Type == MemberEvent.EventType.Join)
        {
            Members.Add(memberEvent.Member);
        }
        else if (memberEvent.Type == MemberEvent.EventType.Leave)
        {
           Members.Remove(memberEvent.Member);
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveMembers(MemberList members)
    {
        Members = members;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async void DoJoin()
    {
        await _connection.InvokeAsync("Serf", SerfHub.SerfMethod.Join);
    }

    private async void DoLeave()
    {
        await _connection.InvokeAsync("Serf", SerfHub.SerfMethod.Leave);
    }
}