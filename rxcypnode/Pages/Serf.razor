@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using rxcypcore.Serf
@using rxcypcore.Serf.Messages
@using rxcypnode.Hubs
@using System.Collections.Concurrent
@using System.Net
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.DependencyInjection

<h3>Serf @ClientState @Members.Keys.Count</h3>

<span>@DebugText</span>

@if (ClientState == ISerfClient.ClientState.Disconnected)
{
    <button @onclick="DoJoin">Join</button>
}
else if (ClientState == ISerfClient.ClientState.Connected) 
{
    <button @onclick="DoLeave">Leave</button>
}

@code {
    private HubConnection _connection;

    [Parameter]
    public ISerfClient.ClientState ClientState { get; set; } = ISerfClient.ClientState.Initializing;

    [Parameter]
    public MemberList Members { get; set; } = new();

    [Parameter]
    public string DebugText { get; set; } = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:7000/hubs/serf")
            .AddMessagePackProtocol()
            .Build();
        _connection.On<ISerfClient.ClientState>("ClientState", ReceiveClientState);
        _connection.On<MemberEvent>("MemberEvent", ReceiveMemberEvent);
        _connection.On<MemberList>("Members", ReceiveMembers);
        await _connection.StartAsync();
    }

    Task ReceiveClientState(ISerfClient.ClientState clientState)
    {
        Console.WriteLine("Received client state");
        ClientState = clientState;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveMemberEvent(MemberEvent memberEvent)
    {
        Console.WriteLine("Received member event");
        DebugText = "Received member event";

        if (memberEvent.Type == MemberEvent.EventType.Join)
        {
            DebugText += "Add member";
            //Members.Add(memberEvent.Member);
        }
        else if (memberEvent.Type == MemberEvent.EventType.Leave)
        {
            DebugText += "Remove member";
            //Members.Remove(memberEvent.Member);
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveMembers(MemberList members)
    {
        Console.WriteLine("Received members");
        Members = members;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async void DoJoin()
    {
        DebugText += "Join";
        await _connection.InvokeAsync("Serf", SerfHub.SerfMethod.Join);
    }

    private async void DoLeave()
    {
        DebugText += "Leave";
        await _connection.InvokeAsync("Serf", SerfHub.SerfMethod.Leave);
    }
}