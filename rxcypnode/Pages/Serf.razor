@page "/serf"
@using Microsoft.AspNetCore.SignalR.Client
@using rxcypcore.Serf
@using rxcypnode.Hubs
@using MessagePack
@using Microsoft.Extensions.DependencyInjection

<div class="container">
    <div class="row align-items-center">
        <div class="col">
            <span style="margin-right: 12px;"><i title="@ClientState" class="bi bi-broadcast client-@ClientState.ToString().ToLower()"></i> @ClientState</span>
            
            @if (ClientState == ISerfClient.ClientState.Disconnected)
            {
                <button type="button" class="btn btn-sm btn-primary" @onclick="DoJoin">Join</button><br/>
            }
            else if (ClientState == ISerfClient.ClientState.Connected)
            {
                <button type="button" class="btn btn-sm btn-primary" @onclick="DoLeave">Leave</button><br/>
            }
        </div>
    </div>

    <div class="row">
        <div class="col">
            <table class="table table-striped table-hover">
                <thead class="thead=light">
                <tr>
                    <th scope="col"/>
                    <th scope="col">
                        Name
                    </th>
                    <th scope="col" class="text-right">
                        Address
                    </th>
                    <th scope="col" class="text-right">
                        Port
                    </th>
                </tr>
                </thead>
                <tbody>
                @foreach (var (key, value) in Members.Data)
                {
                    @foreach (var endpoint in value)
                    {
                        <tr>
                            <td>
                                <span><i title="@endpoint.Status" class="bi bi-broadcast serf-@endpoint.Status"></i></span>
                            </td>
                            <td>
                                @key
                            </td>
                            <td align="right">
                                @endpoint.Address
                            </td>
                            <td align="right">
                                @endpoint.Port.ToString()
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private HubConnection _connection;

    [Parameter]
    public ISerfClient.ClientState ClientState { get; set; } = ISerfClient.ClientState.Initializing;

    [Parameter]
    public MemberList Members { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl("http://localhost:7000/hubs/serf")
            .AddMessagePackProtocol(options =>
            {
                options.SerializerOptions = MessagePackSerializerOptions
                    .Standard
                    .WithResolver(rxcypcore.Helper.MessagePack.Resolver.Get())
                    .WithSecurity(MessagePackSecurity.UntrustedData);
            })
            .Build();
        
        _connection.On<ISerfClient.ClientState>("ClientState", ReceiveClientState);
        _connection.On<MemberEvent>("MemberEvent", ReceiveMemberEvent);
        _connection.On<MemberList>("Members", ReceiveMembers);
        await _connection.StartAsync();
    }

    Task ReceiveClientState(ISerfClient.ClientState clientState)
    {
        ClientState = clientState;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveMemberEvent(MemberEvent memberEvent)
    {
        Console.WriteLine("Member " + memberEvent.Type + " for " + memberEvent.Member.Name);
        
        if (memberEvent.Type == MemberEvent.EventType.Join)
        {
            Members.Add(memberEvent.Member);
        }
        else if (memberEvent.Type == MemberEvent.EventType.Leave)
        {
           Members.Remove(memberEvent.Member);
        }
        else if (memberEvent.Type == MemberEvent.EventType.Failed)
        {
            Members.Failed(memberEvent.Member);
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    Task ReceiveMembers(MemberList members)
    {
        Members = members;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async void DoJoin()
    {
        await _connection.InvokeAsync("Serf", SerfHub.SerfMethod.Join);
    }

    private async void DoLeave()
    {
        await _connection.InvokeAsync("Serf", SerfHub.SerfMethod.Leave);
    }
}